{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"ComposeChangelog <p>This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>filtering<ul> <li>useful to filter out uninteresting old changelog entries on app start</li> <li>useful for filtering changelog based on build flavour</li> </ul> </li> <li>also supports automatic handling of showing changelogs on app start (uses preference to save last seen changelog version and handles everything for you automatically to only show new changelogs and only show those once)</li> <li>customise look<ul> <li>you can provide custom composables for every item type if desired</li> <li>you can provide custom version name formatter</li> <li>you can provide a custom sorter</li> </ul> </li> <li>supports raw and xml resources, default resource name is <code>changelog.xml</code> in raw folder</li> <li>supports summaries with a \"show more\" button</li> <li>optional provides a <code>gradle plugin</code> that allows you to convert version names automatically to version numbers</li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":"Changelogs"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library and the provided modules do support following platforms.</p> Module android ios windows macos wasm Info Core <code>core</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  Modules <code>renderer-header</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>statesaver-kotpreferences</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>statesaver-preferences</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     -                  Gradle Plugin <code>gradle-plugin</code>                    -                                     -                                     -                                     -                                     -                                 this is a gradle plugin only              <code>gradle-plugin-shared</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714"},{"location":"#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"compatibility/","title":"Compatibility","text":"<p>Information about the compatibility of this library with all my other libraries can be found here.</p>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Compose Multiplatform <code>1.8.2</code> Uses jetpack compose <code>1.8.2</code> and material3 <code>1.3.2</code> <p>More details about the jetpack dependencies can be found in JetBrains Release Notes.</p>"},{"location":"dependencies/#modules","title":"Modules","text":"Module Dependency Version Core <code>core</code> - Modules <code>renderer-header</code> - <code>statesaver-kotpreferences</code> KotPreferences <code>2.0.0</code> <code>statesaver-preferences</code> - Gradle Plugin <code>gradle-plugin</code> - <code>gradle-plugin-shared</code> -"},{"location":"me/","title":"About Me","text":"<p>Check out my main homepage to get an impression of what I do and my open source libraries, android apps and garmin watchfaces that I've developed.</p> <p>https://mflisar.github.io/</p>"},{"location":"other-libraries/","title":"Other Libraries","text":"<p>Here you can find an overview of my main libraries that do all play well together including some short descriptions.</p> Utilities Library Description CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries Library Description KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 7. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Lumberjack This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device. Compose Image Library Description ComposeColors A simple collection of colors that can be used inside any KMP compose project. ComposeDebugDrawer This library offers you a simple and easily extendable debug drawer. ComposeDialogs A compose framework for modal dialogs. ComposePreferences This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences. ComposeThemer This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app. Unofficial Projects Library Description kmp-parcelize a kmp parcelize library that allows you to use the `@Parcelize` annotation in your kmp projects kmp-library a collection of gradle plugins for my demo projects as well as for my own apps kmp-democomposables a collection of composables that I use for my demo projects Toolbox My personal toolbox library"},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val composechangelog = \"&lt;LATEST-VERSION&gt;\"\n\n// core\nimplementation(\"io.github.mflisar.composechangelog:core:$composechangelog\")\n\n// modules\nimplementation(\"io.github.mflisar.composechangelog:renderer-header:$composechangelog\")\nimplementation(\"io.github.mflisar.composechangelog:statesaver-kotpreferences:$composechangelog\")\nimplementation(\"io.github.mflisar.composechangelog:statesaver-preferences:$composechangelog\")\n\n// gradle plugin\nimplementation(\"io.github.mflisar.composechangelog:gradle-plugin:$composechangelog\")\nimplementation(\"io.github.mflisar.composechangelog:gradle-plugin-shared:$composechangelog\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\n\ncomposechangelog = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\n\n# core\ncomposechangelog-core = { module = \"io.github.mflisar.composechangelog:core\", version.ref = \"composechangelog\" }\n\n# modules\ncomposechangelog-renderer-header = { module = \"io.github.mflisar.composechangelog:renderer-header\", version.ref = \"composechangelog\" }\ncomposechangelog-statesaver-kotpreferences = { module = \"io.github.mflisar.composechangelog:statesaver-kotpreferences\", version.ref = \"composechangelog\" }\ncomposechangelog-statesaver-preferences = { module = \"io.github.mflisar.composechangelog:statesaver-preferences\", version.ref = \"composechangelog\" }\n\n# gradle plugin\ncomposechangelog-gradle-plugin = { module = \"io.github.mflisar.composechangelog:gradle-plugin\", version.ref = \"composechangelog\" }\ncomposechangelog-gradle-plugin-shared = { module = \"io.github.mflisar.composechangelog:gradle-plugin-shared\", version.ref = \"composechangelog\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code># core\nimplementation(libs.composechangelog.core)\n\n# modules\nimplementation(libs.composechangelog.renderer.header)\nimplementation(libs.composechangelog.statesaver.kotpreferences)\nimplementation(libs.composechangelog.statesaver.preferences)\n\n# gradle plugin\nimplementation(libs.composechangelog.gradle.plugin)\nimplementation(libs.composechangelog.gradle.plugin.shared)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#define-your-changelog-as-xml-file","title":"Define your changelog as xml file","text":"<pre><code>&lt;changelog&gt;\n\n    &lt;release versionName=\"2.0.0\" date=\"2018-03-01\" title=\"Major Update: Version 2.0.0\"&gt;\n\n        &lt;!-- optional header --&gt;\n        &lt;header icon=\"Info\"&gt;\n            &lt;title&gt;This version introduces a new feature: Cool New Feature&lt;/title&gt;\n            &lt;infos&gt;\n                &lt;item&gt;Feature 1: theme the app the way you want it&lt;/item&gt;\n                &lt;item&gt;Feature 2: ...&lt;/item&gt;\n                &lt;item&gt;Feature 3: ...&lt;/item&gt;\n            &lt;/infos&gt;\n        &lt;/header&gt;\n\n        &lt;!-- news --&gt;\n        &lt;news&gt;\n            &lt;item&gt;New &lt;b&gt;backup function&lt;/b&gt; added&lt;/item&gt;\n            &lt;item&gt;Added a progress indicator to the backup&lt;/item&gt;\n            &lt;item&gt;Some longer news with a very very very very very very very very very very very very long description to ensure that this item has multiple lines&lt;/item&gt;\n        &lt;/news&gt;\n\n        &lt;!-- improvements --&gt;\n        &lt;improvements&gt;\n            &lt;item&gt;Scrolling performance drastically improved&lt;/item&gt;\n            &lt;item&gt;Fixed a rare crash during export&lt;/item&gt;\n        &lt;/improvements&gt;\n\n        &lt;!-- changes --&gt;\n        &lt;changes&gt;\n            &lt;item&gt;Menu restructured - the export function was moved to the settings screen&lt;/item&gt;\n        &lt;/changes&gt;\n\n        &lt;!-- bugfixes --&gt;\n        &lt;bugfixes&gt;\n            &lt;item&gt;Fixed a possible rare crash during export&lt;/item&gt;\n            &lt;item&gt;Fixed a rare crash during export&lt;/item&gt;\n            &lt;more&gt;\n                &lt;item&gt;Fixed a small internal bug&lt;/item&gt;\n                &lt;item&gt;Fixed another small internal bug&lt;/item&gt;\n                &lt;item&gt;And another one...&lt;/item&gt;\n                &lt;item&gt;And another one...&lt;/item&gt;\n                &lt;item&gt;And another one...&lt;/item&gt;\n                &lt;item&gt;And another one...&lt;/item&gt;\n            &lt;/more&gt;\n        &lt;/bugfixes&gt;\n    &lt;/release&gt;\n\n    &lt;release versionName=\"1.0.1\" date=\"2018-02-01\"&gt;\n        &lt;!-- bugfixes --&gt;\n        &lt;bugfixes&gt;\n            &lt;item&gt;Severe crash when opening the settings screen fixed&lt;/item&gt;\n        &lt;/bugfixes&gt;\n    &lt;/release&gt;\n\n    &lt;release versionName=\"1.0.0\" date=\"2018-01-01\"&gt;\n        &lt;!-- optional header --&gt;\n        &lt;header icon=\"Outlined.Warning\"&gt;\n            &lt;title&gt;First release version&lt;/title&gt;\n            &lt;item&gt;We finally made it - this is the first stable release version&lt;/item&gt;\n        &lt;/header&gt;\n        &lt;!-- news --&gt;\n        &lt;news&gt;\n            &lt;item&gt;New backup function added&lt;/item&gt;\n            &lt;item&gt;Added a progress indicator to the backup&lt;/item&gt;\n        &lt;/news&gt;\n        &lt;!-- improvements --&gt;\n        &lt;improvements&gt;\n            &lt;item&gt;Scrolling performance drastically improved&lt;/item&gt;\n            &lt;item&gt;Fixed a rare crash during export&lt;/item&gt;\n        &lt;/improvements&gt;\n        &lt;!-- changes --&gt;\n        &lt;changes&gt;\n            &lt;item&gt;Menu restructured - the export function was moved to the settings screen&lt;/item&gt;\n        &lt;/changes&gt;\n        &lt;!-- bugfixes --&gt;\n        &lt;bugfixes&gt;\n            &lt;item&gt;Fixed a possible rare crash during export&lt;/item&gt;\n            &lt;item&gt;Fixed a rare crash during export&lt;/item&gt;\n            &lt;more&gt;\n                &lt;item&gt;Fixed a small internal bug&lt;/item&gt;\n                &lt;item&gt;Fixed another small internal bug&lt;/item&gt;\n            &lt;/more&gt;\n        &lt;/bugfixes&gt;\n    &lt;/release&gt;\n\n&lt;/changelog&gt;\n</code></pre> <p>Info</p> <ul> <li>the header tag only works if you add the <code>renderer-header</code> module!</li> <li>supported icons for the header tag must be defined by yourself (the icon is optional though)</li> </ul>"},{"location":"usage/#show-the-interesting-parts-of-the-changelog-on-app-start","title":"Show the interesting parts of the changelog on app start","text":"<pre><code>// define a version formatter that can convert between a version number and a version string\nval CHANGELOG_FORMATTER = DefaultVersionFormatter(DefaultVersionFormatter.Format.MajorMinorPatchCandidate)\n\n // 1) we need a state saver to persist the version for which the changelog was last shown\n// use either of the following 2 or implement the corresponding interface yourself\n\n// saves the last shown version inside a preference file\nval changelogStateSaver = remember {\n    ChangelogStateSaverPreferences.create(context) // context must only be provided on android!\n}\n\n// ALTERNATIVE: if you use my kotpreference library like this demo you can do following:\nval changelogStateSaverKotPrefs = remember {\n    ChangelogStateSaverKotPreferences(DemoPrefs.lastShownVersionForChangelog)\n}\n\n// 2) optional - here you can apply some customisations like changelog resource id, localized texts, styles, filter, sorter, renderer...\nval setup = ChangelogDefaults.setup(context = context) // context must only be provided on android!\n\n// 3) show the changelog for the app start - this will only show the changelogs that the user did not see yet\nval versionName = Changelog.getAppVersionName(context)\nval changelogState = rememberChangelogState()\n// initially we check if we need to show the changelog\n// this is optional of course...\nLaunchedEffect(Unit) {\n    changelogState.checkShouldShowChangelogOnStart(\n        changelogStateSaver,\n        versionName,\n        CHANGELOG_FORMATTER\n    )\n}\n</code></pre>"},{"location":"usage/#show-the-full-changelog","title":"Show the full changelog","text":"<pre><code>Button(\n    onClick = {\n        changelogState.show()\n    }\n) {\n    Text(\"Show Changelog\")\n}\n</code></pre>"},{"location":"usage/#header-renderer","title":"Header renderer","text":"<p>If you want to use the header renderer, add the module and register the renderer like following:</p> <pre><code>// in this example we define a renderer that can render 3 icons for the header - this optional\nChangelog.registerRenderer(\n    ChangelogHeaderRenderer {\n        val icon = when (it?.lowercase()) {\n            \"info\" -&gt; Icons.Default.Info\n            \"new\" -&gt; Icons.Default.NewReleases\n            \"warning\" -&gt; Icons.Default.Warning\n            else -&gt; null\n        }\n        if (icon != null) {\n            Icon(imageVector = icon, contentDescription = null)\n        }\n    }\n)\n</code></pre>"},{"location":"advanced/gradle-plugin/","title":"Gradle Plugin","text":"<p>This plugin allows you to transform a version string into a version code. This is useful if you want to use a version string in your gradle files and want to calculate the version code based on it.</p>"},{"location":"advanced/gradle-plugin/#example","title":"Example","text":"<p>Top level <code>build.gradle.kts</code> file:</p> <pre><code>plugins {\n    id(\"io.github.mflisar.composechangelog.gradle-plugin\") apply false\n}\n</code></pre> <p>After adding above you can simple apply the plugin inside your apps <code>build.gradle.kts</code> file like following and use it like following:</p> <pre><code>import com.michaelflisar.composechangelog.Changelog\nimport com.michaelflisar.composechangelog.DefaultVersionFormatter\n\nplugins {\n    // other plugins\n    id(\"com.android.application\")\n    id(\"kotlin-android\")\n    id(\"kotlin-kapt\")\n\n    // plugin of compose changelog\n    id(\"io.github.mflisar.composechangelog.gradle-plugin\")\n}\n\n// define your app version code based on your format, here we use the Major.Minor.Patch format\nval version = \"0.3.0\"\nval code = Changelog.buildVersionCode(version, DefaultVersionFormatter(DefaultVersionFormatter.Format.MajorMinorPatch))\n\n// make sure to use the SAME formatter inside your code whenever you want to show a changelog - Major.Minor.Patch format is the default one though\n\nandroid {\n\n    // ...\n\n    defaultConfig {\n        // use the version and code variables from above\n        versionCode = code\n        versionName = version\n    }\n\n     // ...\n}\n</code></pre> <p>You now only must change <code>val version = \"0.3.0\"</code> to whatever new version you want and the code will be calculated by itself.</p> <p>Additionally you can easily use the <code>versionName</code> tag inside your <code>changelog.xml</code> file, the formatter will correctly parse it to it's number for you.</p> <p>Always make sure to use the same formatter in your <code>build.gradle.kts</code> as well as inside your code.</p>"},{"location":"modules/core/","title":"Core","text":"<p>This is the core module. It contains the changelog composable and all the necessary logic.</p> <p>All other modules are just optional extensions.</p>"},{"location":"modules/statesaver-kotpreferences/","title":"Statesaver KotPreferences","text":"<p>This module provides the functionality to save and use the last show changelog version. It uses my <code>KotPreferences</code> library for this purpose.</p> <pre><code>val changelogStateSaverKotPrefs = ChangelogStateSaverKotPreferences(DemoPrefs.lastShownVersionForChangelog) // pass in any StorageSetting&lt;Boolean&gt; from KotPreferences\n\n// use this state saver with ComposeChangelog\n</code></pre>"},{"location":"modules/statesaver-preferences/","title":"Statesaver Preferences","text":"<p>This module provides the functionality to save and use the last show changelog version. It uses the plain jetpack preferences to store the version code of the last shown changelog.</p> <pre><code>val changelogStateSaverKotPrefs = ChangelogStateSaverPreferences.create(context)\n\n// use this state saver with ComposeChangelog\n</code></pre>"}]}